"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask+sdk-analytics@0.0.5";
exports.ids = ["vendor-chunks/@metamask+sdk-analytics@0.0.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  analytics: () => analytics\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/analytics.ts\nvar import_openapi_fetch = __toESM(__webpack_require__(/*! openapi-fetch */ \"(ssr)/./node_modules/.pnpm/openapi-fetch@0.13.8/node_modules/openapi-fetch/dist/cjs/index.cjs\"));\n\n// src/sender.ts\nvar Sender = class {\n  constructor(options) {\n    this.batch = [];\n    this.maxTimeoutMs = 3e4;\n    this.timeoutId = null;\n    this.isSending = false;\n    this.batchSize = options.batchSize;\n    this.baseTimeoutMs = options.baseTimeoutMs;\n    this.currentTimeoutMs = options.baseTimeoutMs;\n    this.sendFn = options.sendFn;\n  }\n  enqueue(item) {\n    this.batch.push(item);\n    this.schedule();\n  }\n  schedule() {\n    if (this.batch.length > 0 && !this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        this.timeoutId = null;\n        this.flush();\n      }, this.currentTimeoutMs);\n    }\n  }\n  async flush() {\n    if (this.isSending || this.batch.length === 0) {\n      return;\n    }\n    this.isSending = true;\n    const current = [...this.batch.slice(0, this.batchSize)];\n    this.batch = this.batch.slice(this.batchSize);\n    try {\n      await this.sendFn(current);\n      this.currentTimeoutMs = this.baseTimeoutMs;\n    } catch (error) {\n      console.error(\"Sender: Failed to send batch\", error);\n      this.batch = [...current, ...this.batch];\n      this.currentTimeoutMs = Math.min(\n        this.currentTimeoutMs * 2,\n        this.maxTimeoutMs\n      );\n    } finally {\n      this.isSending = false;\n      this.schedule();\n    }\n  }\n};\nvar sender_default = Sender;\n\n// src/analytics.ts\nvar Analytics = class {\n  constructor(baseUrl) {\n    this.enabled = false;\n    this.properties = {};\n    const client2 = (0, import_openapi_fetch.default)({ baseUrl });\n    const sendFn = async (batch) => {\n      const res = await client2.POST(\"/v1/events\", { body: batch });\n      if (res.response.status !== 200) {\n        throw new Error(res.error);\n      }\n    };\n    this.sender = new sender_default({ batchSize: 100, baseTimeoutMs: 200, sendFn });\n  }\n  enable() {\n    this.enabled = true;\n  }\n  setGlobalProperty(key, value) {\n    this.properties[key] = value;\n  }\n  track(name, properties) {\n    if (!this.enabled) {\n      return;\n    }\n    const event = {\n      name,\n      ...this.properties,\n      ...properties\n    };\n    this.sender.enqueue(event);\n  }\n};\nvar analytics_default = Analytics;\n\n// src/index.ts\nvar endpoint;\nvar _a;\nif (typeof process !== \"undefined\" && process.env) {\n  endpoint = (_a = process.env.METAMASK_ANALYTICS_ENDPOINT) != null ? _a : process.env.NEXT_PUBLIC_METAMASK_ANALYTICS_ENDPOINT;\n}\nvar METAMASK_ANALYTICS_ENDPOINT = endpoint != null ? endpoint : \"https://mm-sdk-analytics.api.cx.metamask.io/\";\nvar client = new analytics_default(METAMASK_ANALYTICS_ENDPOINT);\nvar analytics = client;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1ldGFtYXNrK3Nkay1hbmFseXRpY3NAMC4wLjUvbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGstYW5hbHl0aWNzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsbUNBQW1DLG1CQUFPLENBQUMsb0hBQWU7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFNBQVM7QUFDakU7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0Q0FBNEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTCIsInNvdXJjZXMiOlsid2VicGFjazovL25mdC1tYXJrZXQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1ldGFtYXNrK3Nkay1hbmFseXRpY3NAMC4wLjUvbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGstYW5hbHl0aWNzL2Rpc3QvaW5kZXguanM/ZGRjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgYW5hbHl0aWNzOiAoKSA9PiBhbmFseXRpY3Ncbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5cbi8vIHNyYy9hbmFseXRpY3MudHNcbnZhciBpbXBvcnRfb3BlbmFwaV9mZXRjaCA9IF9fdG9FU00ocmVxdWlyZShcIm9wZW5hcGktZmV0Y2hcIikpO1xuXG4vLyBzcmMvc2VuZGVyLnRzXG52YXIgU2VuZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5iYXRjaCA9IFtdO1xuICAgIHRoaXMubWF4VGltZW91dE1zID0gM2U0O1xuICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICB0aGlzLmlzU2VuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuYmF0Y2hTaXplID0gb3B0aW9ucy5iYXRjaFNpemU7XG4gICAgdGhpcy5iYXNlVGltZW91dE1zID0gb3B0aW9ucy5iYXNlVGltZW91dE1zO1xuICAgIHRoaXMuY3VycmVudFRpbWVvdXRNcyA9IG9wdGlvbnMuYmFzZVRpbWVvdXRNcztcbiAgICB0aGlzLnNlbmRGbiA9IG9wdGlvbnMuc2VuZEZuO1xuICB9XG4gIGVucXVldWUoaXRlbSkge1xuICAgIHRoaXMuYmF0Y2gucHVzaChpdGVtKTtcbiAgICB0aGlzLnNjaGVkdWxlKCk7XG4gIH1cbiAgc2NoZWR1bGUoKSB7XG4gICAgaWYgKHRoaXMuYmF0Y2gubGVuZ3RoID4gMCAmJiAhdGhpcy50aW1lb3V0SWQpIHtcbiAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgfSwgdGhpcy5jdXJyZW50VGltZW91dE1zKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmx1c2goKSB7XG4gICAgaWYgKHRoaXMuaXNTZW5kaW5nIHx8IHRoaXMuYmF0Y2gubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNTZW5kaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBjdXJyZW50ID0gWy4uLnRoaXMuYmF0Y2guc2xpY2UoMCwgdGhpcy5iYXRjaFNpemUpXTtcbiAgICB0aGlzLmJhdGNoID0gdGhpcy5iYXRjaC5zbGljZSh0aGlzLmJhdGNoU2l6ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc2VuZEZuKGN1cnJlbnQpO1xuICAgICAgdGhpcy5jdXJyZW50VGltZW91dE1zID0gdGhpcy5iYXNlVGltZW91dE1zO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiU2VuZGVyOiBGYWlsZWQgdG8gc2VuZCBiYXRjaFwiLCBlcnJvcik7XG4gICAgICB0aGlzLmJhdGNoID0gWy4uLmN1cnJlbnQsIC4uLnRoaXMuYmF0Y2hdO1xuICAgICAgdGhpcy5jdXJyZW50VGltZW91dE1zID0gTWF0aC5taW4oXG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVvdXRNcyAqIDIsXG4gICAgICAgIHRoaXMubWF4VGltZW91dE1zXG4gICAgICApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmlzU2VuZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgIH1cbiAgfVxufTtcbnZhciBzZW5kZXJfZGVmYXVsdCA9IFNlbmRlcjtcblxuLy8gc3JjL2FuYWx5dGljcy50c1xudmFyIEFuYWx5dGljcyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoYmFzZVVybCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMucHJvcGVydGllcyA9IHt9O1xuICAgIGNvbnN0IGNsaWVudDIgPSAoMCwgaW1wb3J0X29wZW5hcGlfZmV0Y2guZGVmYXVsdCkoeyBiYXNlVXJsIH0pO1xuICAgIGNvbnN0IHNlbmRGbiA9IGFzeW5jIChiYXRjaCkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50Mi5QT1NUKFwiL3YxL2V2ZW50c1wiLCB7IGJvZHk6IGJhdGNoIH0pO1xuICAgICAgaWYgKHJlcy5yZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuc2VuZGVyID0gbmV3IHNlbmRlcl9kZWZhdWx0KHsgYmF0Y2hTaXplOiAxMDAsIGJhc2VUaW1lb3V0TXM6IDIwMCwgc2VuZEZuIH0pO1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICB9XG4gIHNldEdsb2JhbFByb3BlcnR5KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLnByb3BlcnRpZXNba2V5XSA9IHZhbHVlO1xuICB9XG4gIHRyYWNrKG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBldmVudCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICAuLi50aGlzLnByb3BlcnRpZXMsXG4gICAgICAuLi5wcm9wZXJ0aWVzXG4gICAgfTtcbiAgICB0aGlzLnNlbmRlci5lbnF1ZXVlKGV2ZW50KTtcbiAgfVxufTtcbnZhciBhbmFseXRpY3NfZGVmYXVsdCA9IEFuYWx5dGljcztcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgZW5kcG9pbnQ7XG52YXIgX2E7XG5pZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYpIHtcbiAgZW5kcG9pbnQgPSAoX2EgPSBwcm9jZXNzLmVudi5NRVRBTUFTS19BTkFMWVRJQ1NfRU5EUE9JTlQpICE9IG51bGwgPyBfYSA6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX01FVEFNQVNLX0FOQUxZVElDU19FTkRQT0lOVDtcbn1cbnZhciBNRVRBTUFTS19BTkFMWVRJQ1NfRU5EUE9JTlQgPSBlbmRwb2ludCAhPSBudWxsID8gZW5kcG9pbnQgOiBcImh0dHBzOi8vbW0tc2RrLWFuYWx5dGljcy5hcGkuY3gubWV0YW1hc2suaW8vXCI7XG52YXIgY2xpZW50ID0gbmV3IGFuYWx5dGljc19kZWZhdWx0KE1FVEFNQVNLX0FOQUxZVElDU19FTkRQT0lOVCk7XG52YXIgYW5hbHl0aWNzID0gY2xpZW50O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFuYWx5dGljc1xufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js\n");

/***/ })

};
;